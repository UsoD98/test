{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { loginPost } from \"../api/memberApi\";\nimport { getCookie, removeCookie, setCookie } from \"../util/cookieUtil\";\nconst initState = {\n  email: ''\n};\nconst loadMemberCookie = () => {\n  const memberInfo = getCookie(\"member\");\n  return memberInfo;\n};\nexport const loginPostAsync = createAsyncThunk('loginPostAsync', param => loginPost(param));\nconst loginSlice = createSlice({\n  name: 'loginSlice',\n  initialState: loadMemberCookie() || initState,\n  // 초기값을 쿠키에서 가져오거나 없으면 initState로 설정\n  reducers: {\n    login: (state, action) => {\n      console.log(\"login..........\", action);\n      console.log(action.payload);\n      console.log(\"..........\");\n      setCookie(\"member\", JSON.stringify(action.payload), 1);\n      return action.payload;\n    },\n    logout: () => {\n      console.log(\"logout..........\");\n      removeCookie(\"member\");\n      return {\n        ...initState\n      };\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginPostAsync.fulfilled, (state, action) => {\n      console.log(\"fulfilled\");\n\n      // 서버에서 받은 데이터를 payload로 받아서 state를 업데이트한다.\n      const payload = action.payload;\n      if (!payload.error) {\n        setCookie(\"member\", JSON.stringify(payload), 1);\n      }\n      return payload;\n    }).addCase(loginPostAsync.pending, (state, action) => {\n      console.log(\"pending\");\n    }).addCase(loginPostAsync.rejected, (state, action) => {\n      console.log(\"rejected\");\n    });\n  }\n});\nexport const {\n  login,\n  logout\n} = loginSlice.actions;\nexport default loginSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","loginPost","getCookie","removeCookie","setCookie","initState","email","loadMemberCookie","memberInfo","loginPostAsync","param","loginSlice","name","initialState","reducers","login","state","action","console","log","payload","JSON","stringify","logout","extraReducers","builder","addCase","fulfilled","error","pending","rejected","actions","reducer"],"sources":["/Users/kjw/codequest/test/src/slices/loginSlice.js"],"sourcesContent":["import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\nimport {loginPost} from \"../api/memberApi\";\nimport {getCookie, removeCookie, setCookie} from \"../util/cookieUtil\";\n\nconst initState = {\n    email: ''\n}\n\nconst loadMemberCookie = () => {\n\n    const memberInfo = getCookie(\"member\")\n\n    return memberInfo\n\n}\n\nexport const loginPostAsync = createAsyncThunk('loginPostAsync', (param) => loginPost(param))\n\nconst loginSlice = createSlice({\n    name: 'loginSlice',\n    initialState: loadMemberCookie() || initState, // 초기값을 쿠키에서 가져오거나 없으면 initState로 설정\n    reducers: {\n        login: (state, action) => {\n            console.log(\"login..........\", action)\n            console.log(action.payload)\n            console.log(\"..........\")\n\n            setCookie(\"member\", JSON.stringify(action.payload), 1)\n\n            return action.payload\n        },\n        logout: () => {\n            console.log(\"logout..........\")\n\n            removeCookie(\"member\")\n\n            return {...initState}\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(loginPostAsync.fulfilled, (state, action) => {\n                console.log(\"fulfilled\")\n\n                // 서버에서 받은 데이터를 payload로 받아서 state를 업데이트한다.\n                const payload = action.payload\n\n                if(!payload.error) {\n                    setCookie(\"member\", JSON.stringify(payload), 1)\n                }\n\n                return payload\n            })\n            .addCase(loginPostAsync.pending, (state, action) => {\n                console.log(\"pending\")\n            })\n            .addCase(loginPostAsync.rejected, (state, action) => {\n                console.log(\"rejected\")\n            })\n    }\n\n})\n\nexport const {login, logout} = loginSlice.actions\n\nexport default loginSlice.reducer"],"mappings":"AAAA,SAAQA,gBAAgB,EAAEC,WAAW,QAAO,kBAAkB;AAC9D,SAAQC,SAAS,QAAO,kBAAkB;AAC1C,SAAQC,SAAS,EAAEC,YAAY,EAAEC,SAAS,QAAO,oBAAoB;AAErE,MAAMC,SAAS,GAAG;EACdC,KAAK,EAAE;AACX,CAAC;AAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAE3B,MAAMC,UAAU,GAAGN,SAAS,CAAC,QAAQ,CAAC;EAEtC,OAAOM,UAAU;AAErB,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGV,gBAAgB,CAAC,gBAAgB,EAAGW,KAAK,IAAKT,SAAS,CAACS,KAAK,CAAC,CAAC;AAE7F,MAAMC,UAAU,GAAGX,WAAW,CAAC;EAC3BY,IAAI,EAAE,YAAY;EAClBC,YAAY,EAAEN,gBAAgB,CAAC,CAAC,IAAIF,SAAS;EAAE;EAC/CS,QAAQ,EAAE;IACNC,KAAK,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACtBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,MAAM,CAAC;MACtCC,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,OAAO,CAAC;MAC3BF,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MAEzBf,SAAS,CAAC,QAAQ,EAAEiB,IAAI,CAACC,SAAS,CAACL,MAAM,CAACG,OAAO,CAAC,EAAE,CAAC,CAAC;MAEtD,OAAOH,MAAM,CAACG,OAAO;IACzB,CAAC;IACDG,MAAM,EAAEA,CAAA,KAAM;MACVL,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAE/BhB,YAAY,CAAC,QAAQ,CAAC;MAEtB,OAAO;QAAC,GAAGE;MAAS,CAAC;IACzB;EACJ,CAAC;EACDmB,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAACjB,cAAc,CAACkB,SAAS,EAAE,CAACX,KAAK,EAAEC,MAAM,KAAK;MAClDC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;;MAExB;MACA,MAAMC,OAAO,GAAGH,MAAM,CAACG,OAAO;MAE9B,IAAG,CAACA,OAAO,CAACQ,KAAK,EAAE;QACfxB,SAAS,CAAC,QAAQ,EAAEiB,IAAI,CAACC,SAAS,CAACF,OAAO,CAAC,EAAE,CAAC,CAAC;MACnD;MAEA,OAAOA,OAAO;IAClB,CAAC,CAAC,CACDM,OAAO,CAACjB,cAAc,CAACoB,OAAO,EAAE,CAACb,KAAK,EAAEC,MAAM,KAAK;MAChDC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAC1B,CAAC,CAAC,CACDO,OAAO,CAACjB,cAAc,CAACqB,QAAQ,EAAE,CAACd,KAAK,EAAEC,MAAM,KAAK;MACjDC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IAC3B,CAAC,CAAC;EACV;AAEJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACJ,KAAK;EAAEQ;AAAM,CAAC,GAAGZ,UAAU,CAACoB,OAAO;AAEjD,eAAepB,UAAU,CAACqB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
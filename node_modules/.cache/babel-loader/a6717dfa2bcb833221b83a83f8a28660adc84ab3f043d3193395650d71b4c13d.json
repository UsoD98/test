{"ast":null,"code":"var _jsxFileName = \"/Users/kjw/Library/CloudStorage/OneDrive-\\u1100\\u116A\\u11BC\\u110B\\u116E\\u11AB\\u1103\\u1162\\u1112\\u1161\\u11A8\\u1100\\u116D/React/test/src/pages/member/KakaoRedirectPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useSearchParams, useHistory } from \"react-router-dom\";\nimport { getAccessToken, getMemberWithAccessToken } from \"../../api/kakapApi\";\nimport { useDispatch } from \"react-redux\";\nimport { login } from \"../../slices/loginSlice\";\nimport useCustomLogin from \"../../hooks/useCustomLogin\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KakaoRedirectPage(props) {\n  _s();\n  const [searchParams] = useSearchParams();\n  const history = useHistory();\n  const {\n    moveToPath\n  } = useCustomLogin();\n  const authCode = searchParams.get('code');\n  const error = searchParams.get('error');\n  const dispatch = useDispatch();\n\n  //인가 코드가 바뀔때마다 달라짐 => useEffect로 처리해야 함\n  useEffect(() => {\n    if (error) {\n      // 에러가 있을 경우 홈페이지로 리디렉션\n      history.push(\"/\");\n    } else if (authCode) {\n      getAccessToken(authCode).then(accessToken => {\n        getMemberWithAccessToken(accessToken).then(memberInfo => {\n          console.log(\"--------------------\");\n          console.log(memberInfo);\n          dispatch(login(memberInfo));\n          if (memberInfo && memberInfo.social) {\n            moveToPath(\"/\");\n          } else {\n            // Navigate to the login page\n            history.push(\"/login\");\n          }\n        });\n      });\n    }\n  }, [authCode, error]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Kakao Login Redirect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(KakaoRedirectPage, \"9JvSE8DQHBEgqLawp46jly6hxJU=\", false, function () {\n  return [useSearchParams, useHistory, useCustomLogin, useDispatch];\n});\n_c = KakaoRedirectPage;\nexport default KakaoRedirectPage;\nvar _c;\n$RefreshReg$(_c, \"KakaoRedirectPage\");","map":{"version":3,"names":["React","useEffect","useSearchParams","useHistory","getAccessToken","getMemberWithAccessToken","useDispatch","login","useCustomLogin","jsxDEV","_jsxDEV","KakaoRedirectPage","props","_s","searchParams","history","moveToPath","authCode","get","error","dispatch","push","then","accessToken","memberInfo","console","log","social","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kjw/Library/CloudStorage/OneDrive-광운대학교/React/test/src/pages/member/KakaoRedirectPage.js"],"sourcesContent":["import React, {useEffect} from 'react';\nimport {useSearchParams, useHistory} from \"react-router-dom\";\nimport {getAccessToken, getMemberWithAccessToken} from \"../../api/kakapApi\";\nimport {useDispatch} from \"react-redux\";\nimport {login} from \"../../slices/loginSlice\";\nimport useCustomLogin from \"../../hooks/useCustomLogin\";\n\nfunction KakaoRedirectPage(props) {\n\n    const [searchParams] = useSearchParams()\n    const history = useHistory();\n\n    const {moveToPath} = useCustomLogin()\n\n    const authCode = searchParams.get('code')\n    const error = searchParams.get('error')\n\n    const dispatch = useDispatch()\n\n    //인가 코드가 바뀔때마다 달라짐 => useEffect로 처리해야 함\n    useEffect(() => {\n        if (error) {\n            // 에러가 있을 경우 홈페이지로 리디렉션\n            history.push(\"/\");\n        } else if (authCode) {\n            getAccessToken(authCode).then(accessToken => {\n\n                getMemberWithAccessToken(accessToken).then(memberInfo => {\n                    console.log(\"--------------------\")\n                    console.log(memberInfo)\n                    dispatch(login(memberInfo))\n\n                    if(memberInfo && memberInfo.social) {\n                        moveToPath(\"/\")\n                    }else {\n                        // Navigate to the login page\n                        history.push(\"/login\");\n                    }\n\n                })\n\n            })\n        }\n    }, [authCode, error]);\n\n    return (\n        <div>\n            <div>Kakao Login Redirect</div>\n            {/*<div>{authCode}</div>*/}\n        </div>\n    );\n}\n\nexport default KakaoRedirectPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,SAAQC,eAAe,EAAEC,UAAU,QAAO,kBAAkB;AAC5D,SAAQC,cAAc,EAAEC,wBAAwB,QAAO,oBAAoB;AAC3E,SAAQC,WAAW,QAAO,aAAa;AACvC,SAAQC,KAAK,QAAO,yBAAyB;AAC7C,OAAOC,cAAc,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,SAASC,iBAAiBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAE9B,MAAM,CAACC,YAAY,CAAC,GAAGZ,eAAe,CAAC,CAAC;EACxC,MAAMa,OAAO,GAAGZ,UAAU,CAAC,CAAC;EAE5B,MAAM;IAACa;EAAU,CAAC,GAAGR,cAAc,CAAC,CAAC;EAErC,MAAMS,QAAQ,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC;EACzC,MAAMC,KAAK,GAAGL,YAAY,CAACI,GAAG,CAAC,OAAO,CAAC;EAEvC,MAAME,QAAQ,GAAGd,WAAW,CAAC,CAAC;;EAE9B;EACAL,SAAS,CAAC,MAAM;IACZ,IAAIkB,KAAK,EAAE;MACP;MACAJ,OAAO,CAACM,IAAI,CAAC,GAAG,CAAC;IACrB,CAAC,MAAM,IAAIJ,QAAQ,EAAE;MACjBb,cAAc,CAACa,QAAQ,CAAC,CAACK,IAAI,CAACC,WAAW,IAAI;QAEzClB,wBAAwB,CAACkB,WAAW,CAAC,CAACD,IAAI,CAACE,UAAU,IAAI;UACrDC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;UACnCD,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;UACvBJ,QAAQ,CAACb,KAAK,CAACiB,UAAU,CAAC,CAAC;UAE3B,IAAGA,UAAU,IAAIA,UAAU,CAACG,MAAM,EAAE;YAChCX,UAAU,CAAC,GAAG,CAAC;UACnB,CAAC,MAAK;YACF;YACAD,OAAO,CAACM,IAAI,CAAC,QAAQ,CAAC;UAC1B;QAEJ,CAAC,CAAC;MAEN,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAACJ,QAAQ,EAAEE,KAAK,CAAC,CAAC;EAErB,oBACIT,OAAA;IAAAkB,QAAA,eACIlB,OAAA;MAAAkB,QAAA,EAAK;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE9B,CAAC;AAEd;AAACnB,EAAA,CA5CQF,iBAAiB;EAAA,QAECT,eAAe,EACtBC,UAAU,EAELK,cAAc,EAKlBF,WAAW;AAAA;AAAA2B,EAAA,GAVvBtB,iBAAiB;AA8C1B,eAAeA,iBAAiB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}